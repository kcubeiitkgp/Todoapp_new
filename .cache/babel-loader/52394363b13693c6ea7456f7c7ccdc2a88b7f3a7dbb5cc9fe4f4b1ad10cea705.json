{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaust\\\\Desktop\\\\todolist\\\\todo-app\\\\src\\\\Components\\\\TodoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = _ref => {\n  _s();\n  let {\n    todos,\n    toggleComplete,\n    removeTodo,\n    updateDueDate,\n    handleEdit\n  } = _ref;\n  const [showEditPopup, setShowEditPopup] = useState(false);\n  const [updatedTaskText, setUpdatedTaskText] = useState(\"\");\n  const [updatedDueDate, setUpdatedDueDate] = useState(\"\");\n  const handleTaskUpdate = e => {\n    setUpdatedTaskText(e.target.value);\n  };\n  const handleDueDateUpdate = e => {\n    setUpdatedDueDate(e.target.value);\n  };\n  const openEditPopup = id => {\n    handleEdit(id);\n    setShowEditPopup(true);\n  };\n  const closeEditPopup = () => {\n    setShowEditPopup(false);\n    setUpdatedTaskText(\"\");\n    setUpdatedDueDate(\"\");\n  };\n  const handleUpdateTask = () => {\n    // Call the update task function with the updated text and due date\n    // Pass the task ID as well to identify which task to update\n    // Example: updateTask(updatedTaskText, updatedDueDate, taskId);\n\n    // Reset the state and close the popup\n    setUpdatedTaskText(\"\");\n    setUpdatedDueDate(\"\");\n    setShowEditPopup(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: todo.editing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"edit-task-input\",\n            value: updatedTaskText,\n            onChange: handleTaskUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            className: \"edit-date-input\",\n            value: updatedDueDate,\n            onChange: handleDueDateUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"update-button\",\n            onClick: handleUpdateTask,\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: closeEditPopup,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `todo-text ${todo.completed ? \"completed\" : \"\"}`,\n          children: todo.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: todo.completed,\n          onChange: () => toggleComplete(todo.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"edit-button\",\n          onClick: () => openEditPopup(todo.id),\n          disabled: showEditPopup || todo.editing,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"remove-button\",\n          onClick: () => removeTodo(todo.id),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"Qsw3YXclTZ3tLBprLx9wl94A6N0=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TodoList","_ref","_s","todos","toggleComplete","removeTodo","updateDueDate","handleEdit","showEditPopup","setShowEditPopup","updatedTaskText","setUpdatedTaskText","updatedDueDate","setUpdatedDueDate","handleTaskUpdate","e","target","value","handleDueDateUpdate","openEditPopup","id","closeEditPopup","handleUpdateTask","className","children","map","todo","editing","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","completed","text","checked","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kaust/Desktop/todolist/todo-app/src/Components/TodoList.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst TodoList = ({\r\n  todos,\r\n  toggleComplete,\r\n  removeTodo,\r\n  updateDueDate,\r\n  handleEdit,\r\n}) => {\r\n  const [showEditPopup, setShowEditPopup] = useState(false);\r\n  const [updatedTaskText, setUpdatedTaskText] = useState(\"\");\r\n  const [updatedDueDate, setUpdatedDueDate] = useState(\"\");\r\n\r\n  const handleTaskUpdate = (e) => {\r\n    setUpdatedTaskText(e.target.value);\r\n  };\r\n\r\n  const handleDueDateUpdate = (e) => {\r\n    setUpdatedDueDate(e.target.value);\r\n  };\r\n\r\n  const openEditPopup = (id) => {\r\n    handleEdit(id);\r\n    setShowEditPopup(true);\r\n  };\r\n\r\n  const closeEditPopup = () => {\r\n    setShowEditPopup(false);\r\n    setUpdatedTaskText(\"\");\r\n    setUpdatedDueDate(\"\");\r\n  };\r\n\r\n  const handleUpdateTask = () => {\r\n    // Call the update task function with the updated text and due date\r\n    // Pass the task ID as well to identify which task to update\r\n    // Example: updateTask(updatedTaskText, updatedDueDate, taskId);\r\n\r\n    // Reset the state and close the popup\r\n    setUpdatedTaskText(\"\");\r\n    setUpdatedDueDate(\"\");\r\n    setShowEditPopup(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-list\">\r\n      {todos.map((todo) => (\r\n        <div className=\"todo-item\" key={todo.id}>\r\n          <div className=\"task-container\">\r\n            {todo.editing ? (\r\n              <div className=\"edit-popup\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"edit-task-input\"\r\n                  value={updatedTaskText}\r\n                  onChange={handleTaskUpdate}\r\n                />\r\n                <input\r\n                  type=\"date\"\r\n                  className=\"edit-date-input\"\r\n                  value={updatedDueDate}\r\n                  onChange={handleDueDateUpdate}\r\n                />\r\n                <button className=\"update-button\" onClick={handleUpdateTask}>\r\n                  Update Task\r\n                </button>\r\n                <button className=\"cancel-button\" onClick={closeEditPopup}>\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <div className={`todo-text ${todo.completed ? \"completed\" : \"\"}`}>\r\n                {todo.text}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"button-container\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={todo.completed}\r\n              onChange={() => toggleComplete(todo.id)}\r\n            />\r\n            <button\r\n              className=\"edit-button\"\r\n              onClick={() => openEditPopup(todo.id)}\r\n              disabled={showEditPopup || todo.editing}\r\n            >\r\n              Edit\r\n            </button>\r\n            <button className=\"remove-button\" onClick={() => removeTodo(todo.id)}>\r\n              Remove\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGC,IAAA,IAMX;EAAAC,EAAA;EAAA,IANY;IAChBC,KAAK;IACLC,cAAc;IACdC,UAAU;IACVC,aAAa;IACbC;EACF,CAAC,GAAAN,IAAA;EACC,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMiB,gBAAgB,GAAIC,CAAC,IAAK;IAC9BJ,kBAAkB,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACpC,CAAC;EAED,MAAMC,mBAAmB,GAAIH,CAAC,IAAK;IACjCF,iBAAiB,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAME,aAAa,GAAIC,EAAE,IAAK;IAC5Bb,UAAU,CAACa,EAAE,CAAC;IACdX,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMY,cAAc,GAAGA,CAAA,KAAM;IAC3BZ,gBAAgB,CAAC,KAAK,CAAC;IACvBE,kBAAkB,CAAC,EAAE,CAAC;IACtBE,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;EAED,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA;IACA;;IAEA;IACAX,kBAAkB,CAAC,EAAE,CAAC;IACtBE,iBAAiB,CAAC,EAAE,CAAC;IACrBJ,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,oBACEV,OAAA;IAAKwB,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBrB,KAAK,CAACsB,GAAG,CAAEC,IAAI,iBACd3B,OAAA;MAAKwB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBzB,OAAA;QAAKwB,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC5BE,IAAI,CAACC,OAAO,gBACX5B,OAAA;UAAKwB,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzBzB,OAAA;YACE6B,IAAI,EAAC,MAAM;YACXL,SAAS,EAAC,iBAAiB;YAC3BN,KAAK,EAAEP,eAAgB;YACvBmB,QAAQ,EAAEf;UAAiB;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC,eACFlC,OAAA;YACE6B,IAAI,EAAC,MAAM;YACXL,SAAS,EAAC,iBAAiB;YAC3BN,KAAK,EAAEL,cAAe;YACtBiB,QAAQ,EAAEX;UAAoB;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACFlC,OAAA;YAAQwB,SAAS,EAAC,eAAe;YAACW,OAAO,EAAEZ,gBAAiB;YAAAE,QAAA,EAAC;UAE7D;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlC,OAAA;YAAQwB,SAAS,EAAC,eAAe;YAACW,OAAO,EAAEb,cAAe;YAAAG,QAAA,EAAC;UAE3D;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,gBAENlC,OAAA;UAAKwB,SAAS,EAAG,aAAYG,IAAI,CAACS,SAAS,GAAG,WAAW,GAAG,EAAG,EAAE;UAAAX,QAAA,EAC9DE,IAAI,CAACU;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACNlC,OAAA;QAAKwB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BzB,OAAA;UACE6B,IAAI,EAAC,UAAU;UACfS,OAAO,EAAEX,IAAI,CAACS,SAAU;UACxBN,QAAQ,EAAEA,CAAA,KAAMzB,cAAc,CAACsB,IAAI,CAACN,EAAE;QAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC,eACFlC,OAAA;UACEwB,SAAS,EAAC,aAAa;UACvBW,OAAO,EAAEA,CAAA,KAAMf,aAAa,CAACO,IAAI,CAACN,EAAE,CAAE;UACtCkB,QAAQ,EAAE9B,aAAa,IAAIkB,IAAI,CAACC,OAAQ;UAAAH,QAAA,EACzC;QAED;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlC,OAAA;UAAQwB,SAAS,EAAC,eAAe;UAACW,OAAO,EAAEA,CAAA,KAAM7B,UAAU,CAACqB,IAAI,CAACN,EAAE,CAAE;UAAAI,QAAA,EAAC;QAEtE;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA,GA7CwBP,IAAI,CAACN,EAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA8ClC,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA9FIF,QAAQ;AAAAuC,EAAA,GAARvC,QAAQ;AAgGd,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}